<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git使用笔记]]></title>
    <url>%2F20191206%2FGit%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[git简介git可以说是世界上最先进的分布式版本控制系统了，而且它是开源的。git是Linux大佬Linus Torvalds为了帮助管理Linux内核开发而开发一个开源的版本控制软件(大佬的世界总是这样让我们常人无法企及)，由于git具有速度快、使用灵活、可以离线工作等特点，使得git在开发者间快速流行起来。 为什么要用git对于开发者来讲，版本控制非常重要。比如我们开发一个项目，当我们想要添加新的功能的时候，就会往项目中添加一些代码，总会有一些奇怪的bug发生，改来改去最后自己也不知道原来调通的代码是怎么写的了。到最后可能导致不仅bug没有修复好，而且项目也恢复不到原来的样子了。很多人可能会在改动前先把整个项目copy一份，然后就可以随便改了，但是随着改的越来越多，副本也越来越多，到最后光看名字根本分不清哪个是哪个了。但是如果你使用了版本控制软件，就不用copy那么多副本了，它会帮你记录每一次版本的变更，而且你可以根据变更时添加的注释方便的恢复到任意一个版本。 安装git及配置Ubuntu安装ubuntu直接apt安装即可 1sudo apt-get install git git配置git只需要配置好用户名及邮箱就可以使用了 12$ git config --global user.name"YourName" //配置用户名$ git config --global user.email"email@example.com" //配置邮箱 创建一个新的git仓库git中把版本库称为repository，即仓库，相当于一个目录，在这个目录下的文件都可以由git管理，所有修改都可以被git记录下来。 123$ mkdir gitproject //创建目录$ cd gitproject //切换当前目录$ git init //初始化仓库 仓库初始化好了以后该目录下会自动生成一个.git目录，该目录下存放着git的版本记录，一般情况不要修改，否则有可能破坏git仓库 向git仓库添加新文件以下是向git仓库中添加readme.md文件的过程 123$ touch readme.md //新建readme文件$ git add readme.md //添加readme文件到git暂存区$ git commit -m "add readme.md" //把git暂存区内容更新到master 关于添加文件到暂存区，可以简单的理解为我们网上购物用的购物车，我们可以向购物车内多次添加商品，也就是可以多次通过git add filename向暂存区添加文件，然后把购物车里的商品一起生产订单付款，即通过git commit -m “your commit”命令将暂存区的所有文件都更新到当前分支master中，master是每个仓库默认的主分支，由于我们的仓库还没有新建分支，所以只有这一个分支。（注：只有我们commit了以后才会把暂存区的更改更新到当前分支中，并且我们每次修改一个文件后都要运行一次git add命令才能把更改保存到暂存区） 查看仓库当前状态1234567891011$ git statusOn branch masterYour branch is up to date with 'origin/master'.Changes not staged for commit: (use "git add &lt;file&gt;..." to update what will be committed) (use "git checkout -- &lt;file&gt;..." to discard changes in working directory) modified: readme.mdno changes added to commit (use "git add" and/or "git commit -a") 利用git status可以查看当前仓库有哪些文件被修改了，我们可以看到输出信息提示我们readme.md文件被修改了 查看修改内容比较在上一步中我们可以看到git提示我们readme.md文件被修改了，如果我们想要知道该文件哪些地方被修改了该怎么办呢？我们可以直接使用diff指令来查看被修改的内容 1234567891011$ git diff readme.mddiff --git a/readme.md b/readme.mdindex c12d31c..51703f5 100644--- a/readme.md+++ b/readme.md@@ -2,3 +2,5 @@ This is web app to help you analysis matrix. This project is based on jsp and servlet.++The project is still under construction. 可以看到输出信息是标准的diff输出 版本回退接下来就到了git最重要的功能了，版本回退。git允许用户回退到任意版本，并且速度非常快 123456789101112131415161718192021222324$ git logcommit 8443f1604b93fdabe2b0e861d765cd98992df703 (HEAD -&gt; master, origin/master)Author: changxiaoxin &lt;changx1922330593@gmail.com&gt;Date: Fri Dec 6 20:15:38 2019 +0800 add h1 tag to fistpage.htmlcommit b13aeb85bb3c8a52bb06ab6d30b9fd0c8bdfb163Author: changxiaoxin &lt;changx1922330593@gmail.com&gt;Date: Fri Dec 6 19:09:15 2019 +0800 delete a test filecommit c37d974554509cec6550eddc41f3abc291194912Author: changxiaoxin &lt;changx1922330593@gmail.com&gt;Date: Fri Dec 6 19:04:52 2019 +0800 fix readme.mdcommit e7ccff7dbc0e97921571d7e4dedc5eaac65f9dabAuthor: changxiaoxin &lt;changx1922330593@gmail.com&gt;Date: Fri Dec 6 19:00:41 2019 +0800 add a line to readme.md 我们可以通过git log命令来查看版本变更信息，然后通过git reset - -hard &lt;commit id&gt;来回退到任一版本。 1234$ git reset --hard HEAD^ //回退到上一个版本$ git reset --hard HEAD^^ //回退到上上版本$ git reset --hard HEAD~20 //回到上二十个版本... 一旦我们会退到之前的版本，那么当我们运行git log命令的时候，在这个版本之后的更新信息都会消失不见，那么我们怎么返回更超前的版本呢？我们可以通过git reflog命令来查看操作历史，找到回退版本那次操做前的版本号，就可以切换到更超前的版本了。 撤销文件修改当我们想要撤销当前的修改的时候会有这几种情况： 该文件的修改只存在于工作区，还未被提交到暂存区 1$ git checkout -- &lt;filename&gt; 该文件已经被提交到了暂存区，但是还没有commit提交 12$ git reset HEAD &lt;filename&gt;$ git checkout -- &lt;filename&gt; 如果我们已经commit提交了修改，那么只要回退到上一个版本即可 1$ git reset --hard HEAD^]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用python自动登录校园网]]></title>
    <url>%2F20191121%2F%E7%94%A8python%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E6%A0%A1%E5%9B%AD%E7%BD%91%2F</url>
    <content type="text"><![CDATA[用Python实现自动登录校园网(苏州大学)网关由于校园网有登录时间限制，账户连续在线超过二十四小时就会自动断开，所以每天都要重新登录，麻烦的很，看网上用python提交post表单直接登录比较省事，于是也就看了看学习了一下，自己也写了个非常简单的py来登录校园网。 获取校园网post数据信息首先在chrome中打开校园网登录网站，然后按F12打开开发者工具，输入自己的账号密码，提交登录，然后在开发者工具中Network找到浏览器请求的header信息保存下来然后把相应的信息替换到下面代码中即可 1234567891011121314151617181920212223242526import requestsimport base64USER_ACCOUNT='********'USER_PASSWD='********' post_addr="http://10.9.0.14/index.php/index/login" //如果是别的学校请自己改成对应的网址（下同）post_header=&#123; 'Host': '10.9.0.14', 'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36', 'Accept': 'application/json, text/javascript, */*; q=0.01', 'Accept-Language':'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7', 'Accept-Encoding': 'gzip, deflate', 'Content-Type': 'application/x-www-form-urlencoded', 'X-Requested-With':'XMLHttpRequest', 'Referer':'http://10.9.0.14', 'Content-Length': '67', 'Cookie':'sunriseDomain=campus; sunriseUsername=********; think_language=en-US; PHPSESSID=*********', 'Connection':'keep-alive',&#125; post_data=&#123;'domain':'', 'enablemacauth':'0', 'password':base64.b64encode(USER_PASSWD.encode()), 'username':USER_ACCOUNT &#125; z=requests.post(post_addr,data=post_data,headers=post_header) 实现自动登录用路由器自动登录有了py程序以后就可用openwrt来直接实现自动登录了，可以写一个查询网络状态的脚本，当连接不到互联网的时候就调用py程序进行自动登录就可以实现一直在线了 具体的实现方法以后再更新]]></content>
      <categories>
        <category>笔记</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[marlin配置OLED控制器]]></title>
    <url>%2F20191104%2Fmarlin%E9%85%8D%E7%BD%AEOLED%E6%8E%A7%E5%88%B6%E5%99%A8%2F</url>
    <content type="text"><![CDATA[硬件引脚连接 OLED MEGA2560 GND GND VCC 3.3V D0 23 D1 17 RES 27 DC 25 CS 16 ENCODER MEGA2560 BTN_EN1 31 BTN_EN2 33 BTN_ENC 35 GND GND SPEAKER MEGA2560 VCC 37 GND GND 固件修改## 在Configuration.h添加 12345678// mini OLED 128x64 FULL GRAPHICS CONTROLLER#define Mini_OLED_128x64_FULL_GRAPHICS_CONTROLLER#if defined (Mini_OLED_128x64_FULL_GRAPHICS_CONTROLLER) #define DOGLCD #define U8GLIB_SSD1306 #define REPRAP_DISCOUNT_SMART_CONTROLLER #define NEWPANEL#endif 在dogm_lcd_implementation.h添加12#elif defined(U8GLIB_SSD1306)U8GLIB_SSD1306_128X64 u8g(23, 17, 16, 25); // SW SPI Com: SCK = 23, MOSI = 17, CS = 16, A0 = 25 在Marlin_main.cpp的setup函数中添加1234567#if defined (mini_OLED_128x64_FULL_GRAPHICS_CONTROLLER) pinMode(LCD_PINS_DC, OUTPUT); pinMode(LCD_PINS_RST, OUTPUT); digitalWrite(LCD_PINS_RST , LOW); delay(1000); digitalWrite(LCD_PINS_RST , HIGH);#endif 在pins.h末尾添加12345678910111213#if defined (Mini_OLED_128x64_FULL_GRAPHICS_CONTROLLER) #ifdef LCD_PINS_D5 #undef LCD_PINS_D5 #define LCD_PINS_D5 -1 #endif #ifdef LCD_PINS_D6 #undef LCD_PINS_D6 #define LCD_PINS_D6 -1 #endif #define LCD_PINS_RST 27 #define LCD_PINS_DC 25#endif]]></content>
      <tags>
        <tag>marlin</tag>
        <tag>OLEL_CONTROLLER</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Verilog学习笔记---建立工程]]></title>
    <url>%2F20190804%2Fverilog%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[quartus工程建立new projectFile -&gt; New Project Wizard new Verilog HDL FileFile -&gt; new -&gt; Verilog HDL File set top将工程管理窗口的Hierarchy切换为Files,鼠标右击*.v文件，选择Set as Top-Level Entity 设置DeviceAssignments -&gt; Device and Pin Options... 选择Unused Pin -&gt; As input tri-stated 选择Dual-Purpose Pins -&gt; 全都设置为Use as regular I/O 选择Voltage -&gt; Default I/O standard -&gt; 3.3V-LVTTL OK! *.v文件结构1234567891011121314151617181920`timescale 1ns/1psmodule moduleName( input ..., output reg ..., ... ); //定义接口，逗号隔开reg timer; //定义initial //初始化begin...endalways@(posedge clk) //触发事件 begin //触发响应，begin...end之内为代码块 ... endendmodule 综合写完代码以后点击上方工具栏Start Analysis &amp; Elaboration进行综合 分配管脚综合之后最上方工具栏Assignments-&gt;Pin Planner进入管脚分配界面，在下方Location一栏输入分配的管脚 注意每个接口都必须分配好管脚，如果有未分配的管脚会随机分配，造成不可逆的后果，严重时可能会烧坏芯片 编译分配好管脚以后进行Start Compilation 下载程序点击工具栏Programmer进入下载配置界面 点击左上方Hardware Setup -&gt; USB-Blaster然后会自动识别出芯片添加文件勾选Program -&gt; Start 把程序烧写到flash芯片File -&gt; Convert Programming File Configuration device:里面配置芯片 点击下方SOF Data -&gt; Add File添加文件 然后进入下载程序步骤，在下载之前要先start擦除命令，下载完成重启fpga就可以运行程序了 定义寄存器在定义寄存器时，如果寄存器在always块里使用必须定义为reg类型，如果尽是用于连线或是直接赋值需定义为wire类型，输入信号的类型不能定义为reg型，不管是reg类型信号还是wire类型的信号，定义的寄存器宽度必须满足使用使得需要，但必须稍大于或等于需要使用的位宽。若定义寄存器位宽远远大于使用需求则会浪费资源，如果定义的位宽小于使用需求，则会造成数据位截断，导致程序错误。]]></content>
      <categories>
        <category>笔记</category>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>Verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TM4c123gxl学习笔记-gpio的配置]]></title>
    <url>%2F20190711%2FTM4c123gxl%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-gpio%E7%9A%84%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[设置系统时钟这里和stm32大致是差不多的都要先配置时钟 每一个外设都是在时钟信号的同步下进行工作的，我们首先配置系统的时钟 1234//// Setup the system clock to run at 50 Mhz from PLL with crystal reference//SysCtlClockSet(SYSCTL_SYSDIV_4|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN); 上面的代码即把系统时钟配置为50Mhz 下面分析一下SysCtlClockSet()这个函数，从上面的代码中可以看出这个函数有四个参数(实际上是只有一个参数,这四个值按位取或运算得到真正的参数) 参数 意义 可选值 SYSCTL_SYSDIV_4 时钟源频率除以4 SYSCTL_SYSDIV_1~SYSCTL_SYSDIV_64 SYSCTL_USE_PLL 启用内部PLL(额定值200Mhz) SYSCTL_USE_PLL SYSCTL_USE_OSC. SYSCTL_XTAL_16MHZ 时钟参考源为16Mhz的晶振 可选值很多 SYSCTL_OSC_MAIN 选择主振荡器为时钟源 - 系统在经过pll后频率会变成200Mhz，然后我们利用SYSCTL_SYSDIV_x对200Mhz进行分频得到我们使用的时钟频率（在使用上基本上只用修改SYSCTL_SYSDIV_x参数） 时钟频率计算公式： 1SysCtlClock = 200Mhz/SYSCTL_SYSDIV_4 至此系统时钟配置为50Mhz 启用我们用到的gpio引脚1234567//// Enable and wait for the port to be ready for access//SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF)) &#123; &#125; SysCtlPeripheralEnable()函数就是启用外设的功能,相应的也就有SysCtlPeripheralDisable()函数对外设进行禁用。芯片上电之后，所有外设都是默认禁用状态，所以无论是我们使用gpio、i2c还是spi等外设都要先使用这个函数启用。然后等待外设打开后在进行下一步操作 与gpio有关的参数是SYSCTL_PERIPH_GPIOx,其中最后一位可以是A~F，分别代表6组gpio，每组可分别打开关闭 设置gpio模式关于通用gpio模式的设置只有3个函数 123456GPIOPinTypeGPIOInput(uint32_t ui32Port, uint8_t ui8Pins)//设置gpio为输入模式GPIOPinTypeGPIOOutput(uint32_t ui32Port, uint8_t ui8Pins)//设置gpio为输出模式GPIOPinTypeGPIOOutputOD(uint32_t ui32Port, uint8_t ui8Pins)//设置gpio为开漏输出模式 这三个函数的参数基本是类似的 ui32Port : gpio地址偏移量，取值为GPIO_PORTFx_BASE（x取A~F）代表选择x组gpio ui8Pins : gpio的位选择，取值可以是GPIO_PIN_0~7，或者是他们的或运算，或运算代表对多个gpio同时进行操作 对gpio进行写操作1GPIOPinWrite(uint32_t ui32Port, uint8_t ui8Pins, uint8_t ui8Val) 这个函数感觉很别扭，不知道为什么要用到三个参数 ui32Port : 这个参数是gpio口组的选择，取值为GPIO_PORTFx_BASE（x取A~F）代表选择x组gpio ui8Pins : 这个参数是打开对该组中某位gpio寄存器的写保护，取值可以是GPIO_PIN_0~7，或者是他们的或运算（或运算代表对多个gpio同时进行操作）为了省事可以#define GPIO_ALL 0xFF，然后所有gpio的操作都可以把这个参数改为GPIO_ALL ui8Val : 这个即送入gpio寄存器的数据，当我们上一个参数使用GPIO_ALL时，这个值就是写入gpio寄存器的值，当我们需要把某位置1时，把该参数写为GPIO_PIN_x即可，同样支持或操作该参数不包含的gpioPIN即置0，若想要把该组所有gpio都置0则把该参数写为0 对gpio进行读操作1GPIOPinRead(uint32_t ui32Port, uint8_t ui8Pins) 读操作跟写操作类似，但是只有两个参数，因为读操作不需要对数据进行关闭写保护操作 ui32Port : 这个参数是gpio口组的选择，取值为GPIO_PORTFx_BASE（x取A~F）代表选择x组gpio ui8Pins : 需要读取的gpioPin，取值可以是GPIO_PIN_0~7，或者是他们的或运算（或运算代表对多个gpio同时进行操作） 注意：读操作函数是有返回值的，且为32位，但是只有7:0有效，分别对应GPIO_PIN7:GPIO_PIN_0 以上]]></content>
      <categories>
        <category>笔记</category>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>tm4c123</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NE5534滤波放大电路]]></title>
    <url>%2F20190711%2FNE5534%E6%BB%A4%E6%B3%A2%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[关于NE5534]]></content>
      <categories>
        <category>笔记</category>
        <category>模拟电路</category>
      </categories>
      <tags>
        <tag>hardware</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[千奇百怪的时钟]]></title>
    <url>%2F20190711%2F%E5%8D%83%E5%A5%87%E7%99%BE%E6%80%AA%E7%9A%84%E6%97%B6%E9%92%9F%2F</url>
    <content type="text"><![CDATA[有时候不得不佩服那些天马行空的设计师，他们让时钟这样习以为常的物件变得充满艺术感，倘若家中摆满了这样的东西，心情想必也不会太差。 时钟可以说是生活必不可少的物件，基本上每家每户都会有至少一个时钟来帮助我们记录时间，说起时钟的样式，大概都千篇一律，相同的大框架，换上不一样的表盘，不一样的指针，或是电子机芯，或是机械机芯，总之虽说也琳琅满目，却总会审美疲劳，缺乏创新。你是否也厌倦了客厅那款时钟，想要一台更加独特的时钟呢？接下来我就给大家分享几款奇特的闹钟，也许会让你眼前一新，为你打开新世界的大门。 翻页时钟 至于这款时钟到底叫什么名字也无从考究，就暂且叫他翻页时钟吧，这款时钟可以说是今天介绍的最容易获得的一款时钟了，直接某宝搜索翻页时钟就能看到。 这款时钟没有常规的表盘和指针，看起来更像是各种比赛中常用的记分板，然而它却以时间信息代替了分数，利用电机驱动做到了自动翻页，可以和普通时钟一样正常走时，但是精准度目前我还不知道，因为小编也没有用过呢，不敢妄加评测，不过新颖的翻页设计还是会让人感觉立马高端了许多呢。 Plotclock 这是国外一个Arduino开源项目，由三个舵机加上画臂结构构成了一个简易的机械臂，它能够用马克笔在一块压克力板上写出当前的时间，然后自己再给擦掉，继续重新写下当前的时间，如此反复不眠不休。也正是因此，这个时钟有一个非常有趣的别称“小贱钟”，知道了它的运作方式后会觉得真的是钟如其名啊。这样的时钟放在自己的书桌上，无聊的时候看看也会增添不少乐趣。目前呢这个时钟某宝是有售的，还是直接搜Plotclock就能找到，但大都需要自行组装（手残党慎入）。另外呢，如果你动手能力比较强，还可以自己打造专自己的专属定制版Plotclock哦，想要自己动手diy的朋友我已经帮忙找好了教程，复制下方链接在浏览器打开 https://www.thingiverse.com/thing:248009 Wordclock 这款时钟也比较有意思，而且更具现代风。它不太像时钟，它更像是一块大屏幕，它会读取当前的时间，并且把对应时间的英文单词点亮，未被点亮的字母会隐藏再黑的灯罩之下，读出显示的单词就能知道现在的时间。这样的时钟和现代风格装修的客厅很是相配，想象一下家中有好朋友来做客的时候看到这样高端的时钟，一定会赞叹不已，这足够身为客厅主人的你自豪半天了吧。然后心动的朋友们可以去某宝搜索@#￥#%,,,,打住打住，你真以为某宝什么都有啊，目前呢我还并没有发现有出售这种时钟的地方，那是不是就只能看看了呢？并不，只要你足够喜欢，并且有足够的精力和毅力，就可以靠自己的双手打造一款这样的时钟，还可以根据自己的需求更改显示内容，想要diy这款时钟的朋友可以复制下面的链接哦。 https://www.instructables.com/id/Wordclock/ Marble clock 没错，接下来就是封面上的压轴大戏了，这款是我最喜欢的，所以放在最后讲。这款时钟通过复杂的机械结构带动小球运动，每隔一分钟这些齿轮在电机的驱动下会把一个小球抬到最上方的轨道并使其自由下滑，然后从上往下三排轨道一次是分钟、分钟、小时，第一排的每一颗小球代表着一分钟，第二排一个小球是5分钟，第三排一颗小球代表着一小时，最下面的轨道是为了储存多余的小球保证能够显示最大的时刻。每一分钟过后就有一颗小球被齿轮带上右上方的小轨道，然后在重力作用下滚入第一排轨道，然后第一排小球积满之后会全都滚下来，然后设计者通过巧妙地结构让每次只有一个小球落入第二排轨道，其他小球则全部落到最下面轨道，然后第二排到第三排的过程亦是如此。他的准确性呢，从理论上讲，只要电机转速足够稳定，那么精度还是很不错的。这么一款机械感满满的时钟绝对算得上新颖，瞬间抓住了我的心。不知道你是否也被这巧妙的设计吸引了呢？这样的一款时钟当然也是可以diy一台的，不过你得有一台3d打印机去制作出机械结构，或者可以找3d打印服务商帮忙打印。同样链接在下面 https://www.instructables.com/id/Marble-Clock/ 以上！]]></content>
      <categories>
        <category>奇物妙语</category>
      </categories>
      <tags>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将hexo托管到github]]></title>
    <url>%2F20190711%2F%E5%B0%86hexo%E6%89%98%E7%AE%A1%E5%88%B0github%2F</url>
    <content type="text"><![CDATA[将hexo博客和文章源码同步到github，以便多平台同步，或者电脑文件丢失后的恢复 1、建立新的分支在github上存放静态网页的仓库中创建新的分支source，并将其设置为默认仓库，用来存放源码 2、克隆到本地仓库在hexo主目录下面克隆仓库 1$git clone https://github.com/changxiaoxin/Changxiaoxin.github.io.git 我们克隆仓库分支只是需要其中的.git管理文件，其他的网页文件是不需要的，所以进入刚刚克隆的文件夹，把.git文件夹复制到hexo主目录，然后就可以删除克隆的文件夹 3、命名远程仓库刚刚接触github，我也不知道这一步到底官方是怎么叫的，我就以自己的理解写的（有不对的地方欢迎指正） 1$git remote git remote add origin https://github.com/ChangXiaoxin/ChangXiaoxin.github.io.git 4、向本地仓库中添加文件1$git add -f ./* //加-f参数可以把全部文件都添加进来 这样可以把hexo主目录的文件都添加进来（可能会有嵌入git仓库的提示，是因为有的插件或者主题是直接clone的git仓库，把对应的.git文件删掉就好了） 5、同步到github端12$git commit -m "..."$git push origin source 以上代码可以把本地仓库同步到github 6、博客变更操作每次写好文章后把文章添加同步到git仓库，然后重新部署网站 1234567$git add ./*$git commit -m "..."$git push origin source//同步源码信息$hexo g$hexo d//重新部署静态网站 7、新设备同步操作当第一次使用新设备的时候先使用git clone http://yourgithubrepo 将博客源码同步到新设备上，然后进入刚刚同步的本地仓库目录安装hexo，就可以无缝衔接写作了 以后每次写完博客的时候都执行一下第六步中的命令把变更同步到远程仓库，然后每次更换设备的时候都执行一下git pull命令更新本地仓库（要先进行ssh-key绑定操作） 以上]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2F20190710%2Ftest%2F</url>
    <content type="text"><![CDATA[本条消息使用手机编辑]]></content>
  </entry>
  <entry>
    <title><![CDATA[博客相关网站记录]]></title>
    <url>%2F20190710%2F%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[域名提供商GoDaddy 微信扫码登录，绑定qq邮箱 https://dcc.godaddy.com 域名dns管理DNSPod 微信扫码登录 https://www.dnspod.cn 网站数据统计百度统计 百度统一账号登录（手机号） https://tongji.baidu.com 在线图床 https://share1223.com/free.html postimage 这个图床挺好的，就是生成的链接还得修改一下麻烦 https://postimages.org/ 评论模块Valine qq邮箱登录 https://console.leancloud.app]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>DNS</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RGB调光小夜灯]]></title>
    <url>%2F20190710%2FRGB%E8%B0%83%E5%85%89%E5%B0%8F%E5%A4%9C%E7%81%AF%2F</url>
    <content type="text"><![CDATA[许多人晚上睡觉的时候都喜欢留一盏昏黄的夜灯，在昏黄的氛围中安然睡去，享受美好的睡眠，仿佛没有了它就无法入睡，缺少安全感一样。今天我们就带领大家制作一款颜色可调的小夜灯，无论你喜欢什么颜色，它都能满足你的需求。它以arduino开源硬件为主控，通过三个按钮来控制RGB-LED的颜色，并且还有独立的可充电锂电池，可以摆脱电源线的限制，轻轻松松享受高品质生活。接下来就跟我一起动手制作吧。 所需材料 3D打印外壳 Android mini pro控制器 RGB-LED模块 微动按键 TP4056充电模块 200mAh锂电池 细导线若干 自锁开关 连接示意图： 制作过程1、将Arduino控制板与USB转TTL转接板连在一起然后插入电脑USB口中，连接方式如下 Arduino控制板 USB转TTL VCC VCC GND GND RXD TXD TXD RXD 注意：arduino与USB转TTL的RXD、TXD连接方式 2、将下载好的RGB程序下载到Arduino控制扳里首先在Arduino IDE里打开程序，点击工具选择板卡（Arduino Nano）和端口然后点击代码框上方向右箭头即可自动编译上传代码（当编译完成，代码框下面出现上传字样时按下Arduino控制板上的复位按钮即可下载，这一步可能会不成功，多试几次就行了） 下载成功后IDE显示如下： 3、焊接RGB-LED灯 4、焊接按键 5、焊接电池和充电板 6、焊接开关 7、功能测试 8、装进外壳 9、最终成果 写在最后这个小夜灯是可充电设计，底部有micro-usb口，可以用安卓数据线进行充电。底部还有三个黑色按键和一个开关，开关控制小夜灯的开启和关闭；中间的黑色按键为颜色切换功能，按一次切换一个颜色（红蓝绿循环切换），左边和右边的按键可以调节已选颜色的亮度，通过三种颜色不同亮度的组合来选择不同的颜色。而且此小夜灯具有颜色记忆功能，下一次开启时自动切换到上一次关闭时的颜色状态。 源代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#include&lt;EEPROM.h&gt;#define PIN_RED 9 //定义红色接口#define PIN_GREEN 10 //定义绿色接口#define PIN_BLUE 11 //定义蓝色接口#define button_inc 8 //定义按键#define button_shift 7#define button_dec 6int red = 0;int green = 0;int blue = 0;int keyflag = 0;int keycounter_inc = 0;int keycounter_shift = 0;int keycounter_dec = 0;int color_set = 1;int key_inc = 0;int key_shift = 0;int key_dec = 0;int key_value_old = 0;long timer = 0;void setup() &#123; // put your setup code here, to run once: pinMode(PIN_RED, OUTPUT); pinMode(PIN_GREEN, OUTPUT); pinMode(PIN_BLUE, OUTPUT); pinMode(button_inc,INPUT_PULLUP); //初始化按键 pinMode(button_shift,INPUT_PULLUP); //初始化按键 pinMode(button_dec,INPUT_PULLUP); //初始化按键 red = EEPROM.read(1); green = EEPROM.read(2); blue = EEPROM.read(3);&#125;void keyscan()&#123;//按键扫描程序 keyflag = 0; //清空按键扫描标志 if(digitalRead(button_inc) == LOW)&#123; //检测按键按下 keycounter_inc++; //软件消抖 if(keycounter_inc &gt;= 150)&#123;//消抖之后改变按键值 key_inc = 1; keycounter_inc = 0; //清空消抖计时 &#125; &#125; if(digitalRead(button_shift) == LOW)&#123; //检测按键按下 keycounter_shift++; //软件消抖 if(keycounter_shift &gt;= 150)&#123;//消抖之后改变按键值 key_shift = 1; keycounter_shift = 0; //清空消抖计时 &#125; &#125; if(digitalRead(button_dec) == LOW)&#123; //检测按键按下 keycounter_dec++; //软件消抖 if(keycounter_dec &gt;= 150)&#123;//消抖之后改变按键值 key_dec = 1; keycounter_dec = 0; //清空消抖计时 &#125; &#125; &#125;void colorRGB(int r,int g,int b)&#123; analogWrite(PIN_RED,r); analogWrite(PIN_GREEN,g); analogWrite(PIN_BLUE,b); &#125;void keydo()&#123; if(key_inc == 1)&#123; key_inc = 0; switch(color_set)&#123; case 1:red = red + 25;if(red &gt; 225)red = 0;break; case 2:green = green + 25;if(green &gt; 225)green = 0;break; case 3:blue = blue + 25;if(blue &gt; 225)blue = 0;break; default:break; &#125; &#125; if(key_shift == 1)&#123; key_shift = 0; color_set++; if(color_set &gt;= 4)color_set = 1; &#125;if(key_dec == 1)&#123; key_dec = 0; switch(color_set)&#123; case 1:red = red - 25;if(red &lt; 0)red = 255;break; case 2:green = green - 25;if(green &lt; 0)green = 255;break; case 3:blue = blue - 25;if(blue &lt; 0)blue = 255;break; default:break; &#125;&#125;colorRGB(red,green,blue);EEPROM.write(1,red);EEPROM.write(2,green);EEPROM.write(3,blue);&#125;void loop() &#123;// put your main code here, to run repeatedly:if(millis() - timer &gt;= 1)&#123; timer = millis(); keyflag++; keycounter_inc++; keycounter_shift++; keycounter_dec++; if (keyflag &gt;= 1)keyscan(); //按键扫描程序，扫描间隔1ms&#125;keydo();&#125; 以上]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[powerFilter]]></title>
    <url>%2F20190709%2FpowerFilter%2F</url>
    <content type="text"><![CDATA[电源滤波电容 频率范围（Hz） 电容取值 DC-100k 10uf以上钽电容或铝电解电容 100K-10M 100nf(0.1uf)陶瓷电容 10M-100M 10nf(0.01uf)陶瓷电容 &gt;100M 1nf(0.001uf)陶瓷电容和PCB的地平面与电源的平面电容 注意：电源滤波很重要，有时候电路出现异常情况查找不到原因加上电源滤波也许就能解决问题！！！]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>hardware</tag>
      </tags>
  </entry>
</search>
